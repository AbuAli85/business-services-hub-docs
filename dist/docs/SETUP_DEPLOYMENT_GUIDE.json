{
  "title": "\ud83d\ude80 Business Services Hub - Setup &amp; Deployment Guide",
  "content": "<h1 id=\"business-services-hub-setup-deployment-guide\">\ud83d\ude80 Business Services Hub - Setup &amp; Deployment Guide</h1>\n<h2 id=\"table-of-contents\">\ud83d\udccb Table of Contents</h2>\n<ol>\n<li><a href=\"#prerequisites\">Prerequisites</a></li>\n<li><a href=\"#development-environment-setup\">Development Environment Setup</a></li>\n<li><a href=\"#database-setup\">Database Setup</a></li>\n<li><a href=\"#environment-configuration\">Environment Configuration</a></li>\n<li><a href=\"#local-development\">Local Development</a></li>\n<li><a href=\"#production-deployment\">Production Deployment</a></li>\n<li><a href=\"#docker-deployment\">Docker Deployment</a></li>\n<li><a href=\"#cicd-pipeline\">CI/CD Pipeline</a></li>\n<li><a href=\"#monitoring--logging\">Monitoring &amp; Logging</a></li>\n<li><a href=\"#troubleshooting\">Troubleshooting</a></li>\n</ol>\n<hr />\n<h2 id=\"prerequisites\">\ud83d\udd27 Prerequisites</h2>\n<h3 id=\"system-requirements\">System Requirements</h3>\n<h4 id=\"minimum-requirements\">Minimum Requirements</h4>\n<ul>\n<li><strong>Node.js</strong>: Version 18.0 or higher</li>\n<li><strong>npm</strong>: Version 8.0 or higher</li>\n<li><strong>Git</strong>: Version 2.30 or higher</li>\n<li><strong>PostgreSQL</strong>: Version 13 or higher</li>\n<li><strong>Redis</strong>: Version 6.0 or higher</li>\n</ul>\n<h4 id=\"recommended-requirements\">Recommended Requirements</h4>\n<ul>\n<li><strong>Node.js</strong>: Version 20.0 or higher</li>\n<li><strong>npm</strong>: Version 9.0 or higher</li>\n<li><strong>Git</strong>: Latest version</li>\n<li><strong>PostgreSQL</strong>: Version 15 or higher</li>\n<li><strong>Redis</strong>: Version 7.0 or higher</li>\n<li><strong>Docker</strong>: Version 20.10 or higher</li>\n<li><strong>Docker Compose</strong>: Version 2.0 or higher</li>\n</ul>\n<h3 id=\"required-accounts-services\">Required Accounts &amp; Services</h3>\n<h4 id=\"essential-services\">Essential Services</h4>\n<ul>\n<li><strong>Supabase Account</strong>: Database and authentication</li>\n<li><strong>Stripe Account</strong>: Payment processing</li>\n<li><strong>SendGrid Account</strong>: Email services</li>\n<li><strong>Twilio Account</strong>: SMS services</li>\n<li><strong>Google Cloud Platform</strong>: Maps and additional services</li>\n</ul>\n<h4 id=\"optional-services\">Optional Services</h4>\n<ul>\n<li><strong>AWS Account</strong>: Cloud hosting and services</li>\n<li><strong>CloudFlare Account</strong>: CDN and security</li>\n<li><strong>Sentry Account</strong>: Error monitoring</li>\n<li><strong>LogRocket Account</strong>: User session monitoring</li>\n</ul>\n<hr />\n<h2 id=\"development-environment-setup\">\ud83d\udee0\ufe0f Development Environment Setup</h2>\n<h3 id=\"1-clone-the-repository\">1. Clone the Repository</h3>\n<pre><code class=\"language-bash\"># Clone the main repository\ngit clone https://github.com/your-org/business-services-hub.git\ncd business-services-hub\n\n# Install dependencies\nnpm install\n</code></pre>\n<h3 id=\"2-install-required-tools\">2. Install Required Tools</h3>\n<h4 id=\"nodejs-and-npm\">Node.js and npm</h4>\n<pre><code class=\"language-bash\"># Check current versions\nnode --version\nnpm --version\n\n# Install Node.js (if needed)\n# Using Node Version Manager (nvm)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nnvm install 20\nnvm use 20\n\n# Or download from https://nodejs.org/\n</code></pre>\n<h4 id=\"git-configuration\">Git Configuration</h4>\n<pre><code class=\"language-bash\"># Configure Git\ngit config --global user.name &quot;Your Name&quot;\ngit config --global user.email &quot;your.email@example.com&quot;\n\n# Set up SSH key (optional but recommended)\nssh-keygen -t rsa -b 4096 -C &quot;your.email@example.com&quot;\n</code></pre>\n<h4 id=\"database-tools\">Database Tools</h4>\n<pre><code class=\"language-bash\"># Install PostgreSQL (macOS with Homebrew)\nbrew install postgresql\nbrew services start postgresql\n\n# Install PostgreSQL (Ubuntu/Debian)\nsudo apt update\nsudo apt install postgresql postgresql-contrib\n\n# Install Redis (macOS with Homebrew)\nbrew install redis\nbrew services start redis\n\n# Install Redis (Ubuntu/Debian)\nsudo apt install redis-server\nsudo systemctl start redis-server\n</code></pre>\n<h3 id=\"3-ide-and-development-tools\">3. IDE and Development Tools</h3>\n<h4 id=\"recommended-ides\">Recommended IDEs</h4>\n<ul>\n<li><strong>Visual Studio Code</strong> with extensions:</li>\n<li>ES7+ React/Redux/React-Native snippets</li>\n<li>TypeScript Importer</li>\n<li>Prettier - Code formatter</li>\n<li>ESLint</li>\n<li>GitLens</li>\n<li>Thunder Client (API testing)</li>\n</ul>\n<h4 id=\"development-tools\">Development Tools</h4>\n<pre><code class=\"language-bash\"># Install global development tools\nnpm install -g @supabase/cli\nnpm install -g typescript\nnpm install -g ts-node\nnpm install -g nodemon\nnpm install -g pm2\n</code></pre>\n<hr />\n<h2 id=\"database-setup\">\ud83d\uddc4\ufe0f Database Setup</h2>\n<h3 id=\"1-supabase-setup\">1. Supabase Setup</h3>\n<h4 id=\"create-supabase-project\">Create Supabase Project</h4>\n<ol>\n<li>Go to <a href=\"https://app.supabase.com\">Supabase Dashboard</a></li>\n<li>Click \"New Project\"</li>\n<li>Choose organization and enter project details</li>\n<li>Select region and database password</li>\n<li>Wait for project creation (2-3 minutes)</li>\n</ol>\n<h4 id=\"install-supabase-cli\">Install Supabase CLI</h4>\n<pre><code class=\"language-bash\"># Install Supabase CLI\nnpm install -g @supabase/cli\n\n# Login to Supabase\nsupabase login\n\n# Link to your project\nsupabase link --project-ref your-project-ref\n</code></pre>\n<h4 id=\"database-schema-setup\">Database Schema Setup</h4>\n<pre><code class=\"language-bash\"># Pull existing schema\nsupabase db pull\n\n# Apply migrations\nsupabase db push\n\n# Generate TypeScript types\nsupabase gen types typescript --local &gt; src/types/database.types.ts\n</code></pre>\n<h3 id=\"2-local-database-setup-alternative\">2. Local Database Setup (Alternative)</h3>\n<h4 id=\"postgresql-setup\">PostgreSQL Setup</h4>\n<pre><code class=\"language-bash\"># Create database\ncreatedb business_services_hub\n\n# Create user\npsql -c &quot;CREATE USER bsh_user WITH PASSWORD 'your_password';&quot;\npsql -c &quot;GRANT ALL PRIVILEGES ON DATABASE business_services_hub TO bsh_user;&quot;\n\n# Connect to database\npsql -d business_services_hub -U bsh_user\n</code></pre>\n<h4 id=\"database-schema\">Database Schema</h4>\n<pre><code class=\"language-sql\">-- Create tables\n\\i scripts/schema.sql\n\n-- Insert seed data\n\\i scripts/seed.sql\n</code></pre>\n<h3 id=\"3-redis-setup\">3. Redis Setup</h3>\n<h4 id=\"local-redis\">Local Redis</h4>\n<pre><code class=\"language-bash\"># Start Redis server\nredis-server\n\n# Test Redis connection\nredis-cli ping\n# Should return: PONG\n</code></pre>\n<h4 id=\"redis-configuration\">Redis Configuration</h4>\n<pre><code class=\"language-bash\"># Edit Redis configuration\nsudo nano /etc/redis/redis.conf\n\n# Key settings:\n# bind 127.0.0.1\n# port 6379\n# requirepass your_redis_password\n# maxmemory 256mb\n# maxmemory-policy allkeys-lru\n</code></pre>\n<hr />\n<h2 id=\"environment-configuration\">\u2699\ufe0f Environment Configuration</h2>\n<h3 id=\"1-environment-variables\">1. Environment Variables</h3>\n<h4 id=\"create-environment-files\">Create Environment Files</h4>\n<pre><code class=\"language-bash\"># Copy example environment file\ncp .env.example .env.local\n\n# Copy production environment file\ncp .env.example .env.production\n</code></pre>\n<h4 id=\"development-environment-envlocal\">Development Environment (.env.local)</h4>\n<pre><code class=\"language-env\"># Database\nDATABASE_URL=postgresql://bsh_user:your_password@localhost:5432/business_services_hub\nSUPABASE_URL=https://your-project-ref.supabase.co\nSUPABASE_ANON_KEY=your-supabase-anon-key\nSUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key\n\n# Redis\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=your_redis_password\n\n# Authentication\nJWT_SECRET=your-jwt-secret-key\nJWT_EXPIRES_IN=7d\nREFRESH_TOKEN_SECRET=your-refresh-token-secret\n\n# Payment Processing\nSTRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key\nSTRIPE_SECRET_KEY=sk_test_your_stripe_secret_key\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\n\n# Email Service\nSENDGRID_API_KEY=SG.your_sendgrid_api_key\nSENDGRID_FROM_EMAIL=noreply@yourdomain.com\n\n# SMS Service\nTWILIO_ACCOUNT_SID=your_twilio_account_sid\nTWILIO_AUTH_TOKEN=your_twilio_auth_token\nTWILIO_PHONE_NUMBER=+1234567890\n\n# Google Services\nGOOGLE_MAPS_API_KEY=your_google_maps_api_key\nGOOGLE_CLIENT_ID=your_google_client_id\nGOOGLE_CLIENT_SECRET=your_google_client_secret\n\n# Application\nNODE_ENV=development\nPORT=3000\nAPI_BASE_URL=http://localhost:3000/api\nCLIENT_BASE_URL=http://localhost:3001\n\n# File Upload\nMAX_FILE_SIZE=10485760\nALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,image/webp\n\n# Security\nCORS_ORIGIN=http://localhost:3001\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX_REQUESTS=100\n\n# Monitoring\nSENTRY_DSN=your_sentry_dsn\nLOG_LEVEL=debug\n</code></pre>\n<h4 id=\"production-environment-envproduction\">Production Environment (.env.production)</h4>\n<pre><code class=\"language-env\"># Database\nDATABASE_URL=postgresql://username:password@host:port/database\nSUPABASE_URL=https://your-project-ref.supabase.co\nSUPABASE_ANON_KEY=your-supabase-anon-key\nSUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key\n\n# Redis\nREDIS_URL=redis://username:password@host:port\nREDIS_PASSWORD=your_redis_password\n\n# Authentication\nJWT_SECRET=your-production-jwt-secret-key\nJWT_EXPIRES_IN=7d\nREFRESH_TOKEN_SECRET=your-production-refresh-token-secret\n\n# Payment Processing\nSTRIPE_PUBLISHABLE_KEY=pk_live_your_stripe_publishable_key\nSTRIPE_SECRET_KEY=sk_live_your_stripe_secret_key\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\n\n# Email Service\nSENDGRID_API_KEY=SG.your_production_sendgrid_api_key\nSENDGRID_FROM_EMAIL=noreply@yourdomain.com\n\n# SMS Service\nTWILIO_ACCOUNT_SID=your_production_twilio_account_sid\nTWILIO_AUTH_TOKEN=your_production_twilio_auth_token\nTWILIO_PHONE_NUMBER=+1234567890\n\n# Google Services\nGOOGLE_MAPS_API_KEY=your_production_google_maps_api_key\nGOOGLE_CLIENT_ID=your_production_google_client_id\nGOOGLE_CLIENT_SECRET=your_production_google_client_secret\n\n# Application\nNODE_ENV=production\nPORT=3000\nAPI_BASE_URL=https://api.yourdomain.com\nCLIENT_BASE_URL=https://yourdomain.com\n\n# File Upload\nMAX_FILE_SIZE=10485760\nALLOWED_FILE_TYPES=image/jpeg,image/png,image/gif,image/webp\n\n# Security\nCORS_ORIGIN=https://yourdomain.com\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX_REQUESTS=100\n\n# Monitoring\nSENTRY_DSN=your_production_sentry_dsn\nLOG_LEVEL=info\n</code></pre>\n<h3 id=\"2-service-configuration\">2. Service Configuration</h3>\n<h4 id=\"supabase-configuration\">Supabase Configuration</h4>\n<ol>\n<li>Go to Supabase Dashboard \u2192 Settings \u2192 API</li>\n<li>Copy Project URL and API keys</li>\n<li>Configure Row Level Security (RLS) policies</li>\n<li>Set up authentication providers</li>\n<li>Configure storage buckets</li>\n</ol>\n<h4 id=\"stripe-configuration\">Stripe Configuration</h4>\n<ol>\n<li>Go to Stripe Dashboard \u2192 Developers \u2192 API keys</li>\n<li>Copy publishable and secret keys</li>\n<li>Set up webhook endpoints</li>\n<li>Configure payment methods</li>\n<li>Set up tax settings</li>\n</ol>\n<h4 id=\"sendgrid-configuration\">SendGrid Configuration</h4>\n<ol>\n<li>Go to SendGrid Dashboard \u2192 Settings \u2192 API keys</li>\n<li>Create API key with full access</li>\n<li>Verify sender identity</li>\n<li>Set up domain authentication</li>\n<li>Configure email templates</li>\n</ol>\n<hr />\n<h2 id=\"local-development\">\ud83d\udcbb Local Development</h2>\n<h3 id=\"1-start-development-server\">1. Start Development Server</h3>\n<h4 id=\"backend-development\">Backend Development</h4>\n<pre><code class=\"language-bash\"># Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Or with specific environment\nNODE_ENV=development npm run dev\n\n# With debugging\nDEBUG=app:* npm run dev\n</code></pre>\n<h4 id=\"frontend-development\">Frontend Development</h4>\n<pre><code class=\"language-bash\"># Navigate to frontend directory\ncd frontend\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Or with specific port\nPORT=3001 npm run dev\n</code></pre>\n<h4 id=\"full-stack-development\">Full Stack Development</h4>\n<pre><code class=\"language-bash\"># Start both backend and frontend\nnpm run dev:full\n\n# Or using concurrently\nnpm run dev:concurrent\n</code></pre>\n<h3 id=\"2-database-operations\">2. Database Operations</h3>\n<h4 id=\"run-migrations\">Run Migrations</h4>\n<pre><code class=\"language-bash\"># Run pending migrations\nnpm run db:migrate\n\n# Rollback last migration\nnpm run db:rollback\n\n# Reset database\nnpm run db:reset\n\n# Seed database\nnpm run db:seed\n</code></pre>\n<h4 id=\"database-management\">Database Management</h4>\n<pre><code class=\"language-bash\"># Open database console\nnpm run db:console\n\n# Backup database\nnpm run db:backup\n\n# Restore database\nnpm run db:restore\n</code></pre>\n<h3 id=\"3-testing\">3. Testing</h3>\n<h4 id=\"run-tests\">Run Tests</h4>\n<pre><code class=\"language-bash\"># Run all tests\nnpm test\n\n# Run specific test suite\nnpm run test:unit\nnpm run test:integration\nnpm run test:e2e\n\n# Run tests with coverage\nnpm run test:coverage\n\n# Run tests in watch mode\nnpm run test:watch\n</code></pre>\n<h4 id=\"test-database-setup\">Test Database Setup</h4>\n<pre><code class=\"language-bash\"># Set up test database\nnpm run test:db:setup\n\n# Clean test database\nnpm run test:db:clean\n\n# Run tests with fresh database\nnpm run test:fresh\n</code></pre>\n<h3 id=\"4-code-quality\">4. Code Quality</h3>\n<h4 id=\"linting-and-formatting\">Linting and Formatting</h4>\n<pre><code class=\"language-bash\"># Run ESLint\nnpm run lint\n\n# Fix ESLint issues\nnpm run lint:fix\n\n# Run Prettier\nnpm run format\n\n# Check code formatting\nnpm run format:check\n</code></pre>\n<h4 id=\"type-checking\">Type Checking</h4>\n<pre><code class=\"language-bash\"># Run TypeScript compiler\nnpm run type-check\n\n# Watch for type changes\nnpm run type-check:watch\n</code></pre>\n<hr />\n<h2 id=\"production-deployment\">\ud83d\ude80 Production Deployment</h2>\n<h3 id=\"1-server-preparation\">1. Server Preparation</h3>\n<h4 id=\"system-requirements_1\">System Requirements</h4>\n<ul>\n<li><strong>CPU</strong>: 2+ cores</li>\n<li><strong>RAM</strong>: 4GB+ (8GB recommended)</li>\n<li><strong>Storage</strong>: 50GB+ SSD</li>\n<li><strong>OS</strong>: Ubuntu 20.04+ or CentOS 8+</li>\n</ul>\n<h4 id=\"server-setup\">Server Setup</h4>\n<pre><code class=\"language-bash\"># Update system\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Node.js\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Install PM2\nsudo npm install -g pm2\n\n# Install Nginx\nsudo apt install nginx -y\n\n# Install PostgreSQL\nsudo apt install postgresql postgresql-contrib -y\n\n# Install Redis\nsudo apt install redis-server -y\n</code></pre>\n<h3 id=\"2-application-deployment\">2. Application Deployment</h3>\n<h4 id=\"clone-and-setup\">Clone and Setup</h4>\n<pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/your-org/business-services-hub.git\ncd business-services-hub\n\n# Install dependencies\nnpm ci --production\n\n# Build application\nnpm run build\n\n# Set up environment\ncp .env.production .env\n</code></pre>\n<h4 id=\"database-setup_1\">Database Setup</h4>\n<pre><code class=\"language-bash\"># Create production database\nsudo -u postgres createdb business_services_hub_prod\n\n# Create user\nsudo -u postgres psql -c &quot;CREATE USER bsh_prod WITH PASSWORD 'secure_password';&quot;\nsudo -u postgres psql -c &quot;GRANT ALL PRIVILEGES ON DATABASE business_services_hub_prod TO bsh_prod;&quot;\n\n# Run migrations\nnpm run db:migrate\n</code></pre>\n<h4 id=\"start-application\">Start Application</h4>\n<pre><code class=\"language-bash\"># Start with PM2\npm2 start ecosystem.config.js\n\n# Save PM2 configuration\npm2 save\n\n# Setup PM2 startup\npm2 startup\n</code></pre>\n<h3 id=\"3-nginx-configuration\">3. Nginx Configuration</h3>\n<h4 id=\"nginx-setup\">Nginx Setup</h4>\n<pre><code class=\"language-bash\"># Create Nginx configuration\nsudo nano /etc/nginx/sites-available/business-services-hub\n</code></pre>\n<h4 id=\"nginx-configuration\">Nginx Configuration</h4>\n<pre><code class=\"language-nginx\">server {\n    listen 80;\n    server_name yourdomain.com www.yourdomain.com;\n\n    # Redirect HTTP to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yourdomain.com www.yourdomain.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security Headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n\n    # API Routes\n    location /api {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    # Static Files\n    location / {\n        root /var/www/business-services-hub/dist;\n        try_files $uri $uri/ /index.html;\n\n        # Cache static assets\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n            expires 1y;\n            add_header Cache-Control &quot;public, immutable&quot;;\n        }\n    }\n\n    # File Upload Size\n    client_max_body_size 10M;\n}\n</code></pre>\n<h4 id=\"enable-site\">Enable Site</h4>\n<pre><code class=\"language-bash\"># Enable site\nsudo ln -s /etc/nginx/sites-available/business-services-hub /etc/nginx/sites-enabled/\n\n# Test configuration\nsudo nginx -t\n\n# Restart Nginx\nsudo systemctl restart nginx\n</code></pre>\n<h3 id=\"4-ssl-certificate\">4. SSL Certificate</h3>\n<h4 id=\"lets-encrypt-setup\">Let's Encrypt Setup</h4>\n<pre><code class=\"language-bash\"># Install Certbot\nsudo apt install certbot python3-certbot-nginx -y\n\n# Obtain SSL certificate\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n\n# Test renewal\nsudo certbot renew --dry-run\n</code></pre>\n<hr />\n<h2 id=\"docker-deployment\">\ud83d\udc33 Docker Deployment</h2>\n<h3 id=\"1-docker-configuration\">1. Docker Configuration</h3>\n<h4 id=\"dockerfile\">Dockerfile</h4>\n<pre><code class=\"language-dockerfile\"># Use Node.js 20 Alpine\nFROM node:20-alpine\n\n# Set working directory\nWORKDIR /app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production\n\n# Copy source code\nCOPY . .\n\n# Build application\nRUN npm run build\n\n# Expose port\nEXPOSE 3000\n\n# Start application\nCMD [&quot;npm&quot;, &quot;start&quot;]\n</code></pre>\n<h4 id=\"docker-compose\">Docker Compose</h4>\n<pre><code class=\"language-yaml\">version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - '3000:3000'\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgresql://bsh_user:password@db:5432/business_services_hub\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - ./uploads:/app/uploads\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      - POSTGRES_DB=business_services_hub\n      - POSTGRES_USER=bsh_user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - '5432:5432'\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - '6379:6379'\n    volumes:\n      - redis_data:/data\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - '80:80'\n      - '443:443'\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/ssl\n    depends_on:\n      - app\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre>\n<h3 id=\"2-docker-deployment\">2. Docker Deployment</h3>\n<h4 id=\"build-and-run\">Build and Run</h4>\n<pre><code class=\"language-bash\"># Build images\ndocker-compose build\n\n# Start services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop services\ndocker-compose down\n</code></pre>\n<h4 id=\"production-deployment_1\">Production Deployment</h4>\n<pre><code class=\"language-bash\"># Build production image\ndocker build -t business-services-hub:latest .\n\n# Run production container\ndocker run -d \\\n  --name business-services-hub \\\n  -p 3000:3000 \\\n  -e NODE_ENV=production \\\n  -e DATABASE_URL=your_database_url \\\n  business-services-hub:latest\n</code></pre>\n<hr />\n<h2 id=\"cicd-pipeline\">\ud83d\udd04 CI/CD Pipeline</h2>\n<h3 id=\"1-github-actions\">1. GitHub Actions</h3>\n<h4 id=\"workflow-configuration\">Workflow Configuration</h4>\n<pre><code class=\"language-yaml\">name: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: test_db\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n      redis:\n        image: redis:7\n        options: &gt;-\n          --health-cmd &quot;redis-cli ping&quot;\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '20'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm test\n        env:\n          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db\n          REDIS_URL: redis://localhost:6379\n\n      - name: Run linting\n        run: npm run lint\n\n      - name: Run type checking\n        run: npm run type-check\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '20'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Build application\n        run: npm run build\n\n      - name: Upload build artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: build-files\n          path: dist/\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Deploy to production\n        run: |\n          # Add your deployment commands here\n          echo &quot;Deploying to production...&quot;\n</code></pre>\n<h3 id=\"2-deployment-scripts\">2. Deployment Scripts</h3>\n<h4 id=\"deploy-script\">Deploy Script</h4>\n<pre><code class=\"language-bash\">#!/bin/bash\n# deploy.sh\n\nset -e\n\necho &quot;Starting deployment...&quot;\n\n# Pull latest code\ngit pull origin main\n\n# Install dependencies\nnpm ci --production\n\n# Run migrations\nnpm run db:migrate\n\n# Build application\nnpm run build\n\n# Restart services\npm2 restart business-services-hub\n\necho &quot;Deployment completed successfully!&quot;\n</code></pre>\n<hr />\n<h2 id=\"monitoring-logging\">\ud83d\udcca Monitoring &amp; Logging</h2>\n<h3 id=\"1-application-monitoring\">1. Application Monitoring</h3>\n<h4 id=\"pm2-monitoring\">PM2 Monitoring</h4>\n<pre><code class=\"language-bash\"># Monitor application\npm2 monit\n\n# View logs\npm2 logs business-services-hub\n\n# View specific log\npm2 logs business-services-hub --lines 100\n\n# Restart application\npm2 restart business-services-hub\n\n# Reload application\npm2 reload business-services-hub\n</code></pre>\n<h4 id=\"health-checks\">Health Checks</h4>\n<pre><code class=\"language-bash\"># Create health check script\ncat &gt; health-check.sh &lt;&lt; 'EOF'\n#!/bin/bash\n\n# Check if application is running\nif ! curl -f http://localhost:3000/health &gt; /dev/null 2&gt;&amp;1; then\n    echo &quot;Application is not responding&quot;\n    pm2 restart business-services-hub\n    exit 1\nfi\n\necho &quot;Application is healthy&quot;\nEOF\n\nchmod +x health-check.sh\n\n# Add to crontab for regular checks\n(crontab -l 2&gt;/dev/null; echo &quot;*/5 * * * * /path/to/health-check.sh&quot;) | crontab -\n</code></pre>\n<h3 id=\"2-log-management\">2. Log Management</h3>\n<h4 id=\"log-rotation\">Log Rotation</h4>\n<pre><code class=\"language-bash\"># Install logrotate\nsudo apt install logrotate -y\n\n# Create logrotate configuration\nsudo nano /etc/logrotate.d/business-services-hub\n</code></pre>\n<h4 id=\"logrotate-configuration\">Logrotate Configuration</h4>\n<pre><code>/var/log/business-services-hub/*.log {\n    daily\n    missingok\n    rotate 30\n    compress\n    delaycompress\n    notifempty\n    create 644 root root\n    postrotate\n        pm2 reload business-services-hub\n    endscript\n}\n</code></pre>\n<h3 id=\"3-error-monitoring\">3. Error Monitoring</h3>\n<h4 id=\"sentry-integration\">Sentry Integration</h4>\n<pre><code class=\"language-javascript\">// sentry.js\nconst Sentry = require('@sentry/node');\n\nSentry.init({\n  dsn: process.env.SENTRY_DSN,\n  environment: process.env.NODE_ENV,\n  tracesSampleRate: 1.0,\n});\n\nmodule.exports = Sentry;\n</code></pre>\n<hr />\n<h2 id=\"troubleshooting\">\ud83d\udd27 Troubleshooting</h2>\n<h3 id=\"common-issues\">Common Issues</h3>\n<h4 id=\"1-database-connection-issues\">1. Database Connection Issues</h4>\n<pre><code class=\"language-bash\"># Check database status\nsudo systemctl status postgresql\n\n# Check database logs\nsudo journalctl -u postgresql\n\n# Test database connection\npsql -h localhost -U bsh_user -d business_services_hub\n\n# Reset database password\nsudo -u postgres psql -c &quot;ALTER USER bsh_user PASSWORD 'new_password';&quot;\n</code></pre>\n<h4 id=\"2-redis-connection-issues\">2. Redis Connection Issues</h4>\n<pre><code class=\"language-bash\"># Check Redis status\nsudo systemctl status redis\n\n# Check Redis logs\nsudo journalctl -u redis\n\n# Test Redis connection\nredis-cli ping\n\n# Check Redis configuration\nredis-cli config get &quot;*&quot;\n</code></pre>\n<h4 id=\"3-application-issues\">3. Application Issues</h4>\n<pre><code class=\"language-bash\"># Check application logs\npm2 logs business-services-hub\n\n# Check application status\npm2 status\n\n# Restart application\npm2 restart business-services-hub\n\n# Check system resources\nhtop\ndf -h\nfree -h\n</code></pre>\n<h4 id=\"4-nginx-issues\">4. Nginx Issues</h4>\n<pre><code class=\"language-bash\"># Check Nginx status\nsudo systemctl status nginx\n\n# Check Nginx configuration\nsudo nginx -t\n\n# Check Nginx logs\nsudo tail -f /var/log/nginx/error.log\nsudo tail -f /var/log/nginx/access.log\n\n# Reload Nginx\nsudo systemctl reload nginx\n</code></pre>\n<h3 id=\"performance-optimization\">Performance Optimization</h3>\n<h4 id=\"1-database-optimization\">1. Database Optimization</h4>\n<pre><code class=\"language-sql\">-- Check slow queries\nSELECT query, mean_time, calls, total_time\nFROM pg_stat_statements\nORDER BY mean_time DESC\nLIMIT 10;\n\n-- Analyze table statistics\nANALYZE;\n\n-- Check index usage\nSELECT schemaname, tablename, attname, n_distinct, correlation\nFROM pg_stats\nWHERE tablename = 'your_table_name';\n</code></pre>\n<h4 id=\"2-application-optimization\">2. Application Optimization</h4>\n<pre><code class=\"language-bash\"># Monitor memory usage\npm2 monit\n\n# Check CPU usage\ntop -p $(pgrep -f &quot;node.*business-services-hub&quot;)\n\n# Monitor network connections\nnetstat -tulpn | grep :3000\n\n# Check file descriptors\nlsof -p $(pgrep -f &quot;node.*business-services-hub&quot;)\n</code></pre>\n<h3 id=\"security-checklist\">Security Checklist</h3>\n<h4 id=\"1-server-security\">1. Server Security</h4>\n<ul>\n<li>[ ] Firewall configured (UFW)</li>\n<li>[ ] SSH key authentication only</li>\n<li>[ ] Regular security updates</li>\n<li>[ ] Fail2ban installed and configured</li>\n<li>[ ] SSL certificate valid and auto-renewing</li>\n</ul>\n<h4 id=\"2-application-security\">2. Application Security</h4>\n<ul>\n<li>[ ] Environment variables secured</li>\n<li>[ ] Database credentials encrypted</li>\n<li>[ ] API rate limiting enabled</li>\n<li>[ ] CORS properly configured</li>\n<li>[ ] Input validation implemented</li>\n<li>[ ] SQL injection prevention</li>\n<li>[ ] XSS protection enabled</li>\n</ul>\n<h4 id=\"3-database-security\">3. Database Security</h4>\n<ul>\n<li>[ ] Database user permissions minimal</li>\n<li>[ ] Row Level Security (RLS) enabled</li>\n<li>[ ] Regular backups configured</li>\n<li>[ ] Database encryption at rest</li>\n<li>[ ] Connection encryption enabled</li>\n</ul>\n<hr />\n<h2 id=\"additional-resources\">\ud83d\udcda Additional Resources</h2>\n<h3 id=\"documentation-links\">Documentation Links</h3>\n<ul>\n<li><a href=\"https://nodejs.org/docs/\">Node.js Documentation</a></li>\n<li><a href=\"https://www.postgresql.org/docs/\">PostgreSQL Documentation</a></li>\n<li><a href=\"https://redis.io/documentation\">Redis Documentation</a></li>\n<li><a href=\"https://pm2.keymetrics.io/docs/\">PM2 Documentation</a></li>\n<li><a href=\"https://nginx.org/en/docs/\">Nginx Documentation</a></li>\n<li><a href=\"https://docs.docker.com/\">Docker Documentation</a></li>\n</ul>\n<h3 id=\"support-channels\">Support Channels</h3>\n<ul>\n<li><strong>GitHub Issues</strong>: <a href=\"https://github.com/your-org/business-services-hub/issues\">Create an issue</a></li>\n<li><strong>Discord Community</strong>: <a href=\"https://discord.gg/your-discord\">Join our Discord</a></li>\n<li><strong>Email Support</strong>: support@yourdomain.com</li>\n<li><strong>Documentation</strong>: <a href=\"https://docs.yourdomain.com\">Read the docs</a></li>\n</ul>\n<hr />\n<p>This comprehensive setup and deployment guide provides step-by-step instructions for setting up the Business Services Hub in development and production environments, including troubleshooting tips and best practices for maintaining a healthy deployment.</p>"
}