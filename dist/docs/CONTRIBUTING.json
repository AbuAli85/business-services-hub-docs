{
  "title": "\ud83e\udd1d Contributing to Business Services Hub",
  "content": "<h1 id=\"contributing-to-business-services-hub\">\ud83e\udd1d Contributing to Business Services Hub</h1>\n<p>Thank you for your interest in contributing to the Business Services Hub! This guide will help you get started with contributing to our project.</p>\n<h2 id=\"table-of-contents\">\ud83d\udccb Table of Contents</h2>\n<ol>\n<li><a href=\"#code-of-conduct\">Code of Conduct</a></li>\n<li><a href=\"#getting-started\">Getting Started</a></li>\n<li><a href=\"#development-setup\">Development Setup</a></li>\n<li><a href=\"#contribution-process\">Contribution Process</a></li>\n<li><a href=\"#coding-standards\">Coding Standards</a></li>\n<li><a href=\"#testing-guidelines\">Testing Guidelines</a></li>\n<li><a href=\"#documentation-guidelines\">Documentation Guidelines</a></li>\n<li><a href=\"#issue-reporting\">Issue Reporting</a></li>\n<li><a href=\"#pull-request-process\">Pull Request Process</a></li>\n<li><a href=\"#release-process\">Release Process</a></li>\n</ol>\n<hr />\n<h2 id=\"code-of-conduct\">\ud83d\udcdc Code of Conduct</h2>\n<h3 id=\"our-pledge\">Our Pledge</h3>\n<p>We are committed to providing a welcoming and inclusive environment for all contributors, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>\n<h3 id=\"our-standards\">Our Standards</h3>\n<h4 id=\"positive-behavior\">Positive Behavior</h4>\n<ul>\n<li>Use welcoming and inclusive language</li>\n<li>Be respectful of differing viewpoints and experiences</li>\n<li>Gracefully accept constructive criticism</li>\n<li>Focus on what is best for the community</li>\n<li>Show empathy towards other community members</li>\n</ul>\n<h4 id=\"unacceptable-behavior\">Unacceptable Behavior</h4>\n<ul>\n<li>The use of sexualized language or imagery</li>\n<li>Trolling, insulting/derogatory comments, and personal or political attacks</li>\n<li>Public or private harassment</li>\n<li>Publishing others' private information without explicit permission</li>\n<li>Other conduct which could reasonably be considered inappropriate</li>\n</ul>\n<h3 id=\"enforcement\">Enforcement</h3>\n<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at conduct@abuali.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances.</p>\n<hr />\n<h2 id=\"getting-started\">\ud83d\ude80 Getting Started</h2>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<p>Before you begin, ensure you have the following installed:</p>\n<ul>\n<li><strong>Node.js</strong>: Version 18.0.0 or higher</li>\n<li><strong>npm</strong>: Version 8.0.0 or higher</li>\n<li><strong>Git</strong>: Version 2.30.0 or higher</li>\n<li><strong>Code Editor</strong>: VS Code (recommended) or your preferred editor</li>\n</ul>\n<h3 id=\"fork-and-clone\">Fork and Clone</h3>\n<ol>\n<li><strong>Fork the repository</strong> on GitHub</li>\n<li><strong>Clone your fork</strong> locally:\n   <code>bash\n   git clone https://github.com/yourusername/business-services-hub.git\n   cd business-services-hub</code></li>\n<li><strong>Add upstream remote</strong>:\n   <code>bash\n   git remote add upstream https://github.com/business-services-hub/business-services-hub.git</code></li>\n</ol>\n<h3 id=\"development-setup\">Development Setup</h3>\n<ol>\n<li><strong>Install dependencies</strong>:</li>\n</ol>\n<p><code>bash\n   npm install</code></p>\n<ol>\n<li><strong>Set up environment variables</strong>:</li>\n</ol>\n<p><code>bash\n   cp .env.example .env.local\n   # Edit .env.local with your configuration</code></p>\n<ol>\n<li><strong>Start development server</strong>:</li>\n</ol>\n<p><code>bash\n   npm run dev</code></p>\n<ol>\n<li><strong>Verify setup</strong>:</li>\n<li>Visit <code>http://localhost:3000</code></li>\n<li>Run tests: <code>npm test</code></li>\n<li>Run linting: <code>npm run lint</code></li>\n</ol>\n<hr />\n<h2 id=\"development-setup_1\">\ud83d\udd27 Development Setup</h2>\n<h3 id=\"project-structure\">Project Structure</h3>\n<pre><code>business-services-hub/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/          # React components\n\u2502   \u2502   \u251c\u2500\u2500 ui/             # Reusable UI components\n\u2502   \u2502   \u251c\u2500\u2500 forms/          # Form components\n\u2502   \u2502   \u251c\u2500\u2500 layout/         # Layout components\n\u2502   \u2502   \u2514\u2500\u2500 features/       # Feature-specific components\n\u2502   \u251c\u2500\u2500 pages/              # Next.js pages\n\u2502   \u2502   \u251c\u2500\u2500 api/            # API routes\n\u2502   \u2502   \u251c\u2500\u2500 auth/           # Authentication pages\n\u2502   \u2502   \u251c\u2500\u2500 dashboard/      # Dashboard pages\n\u2502   \u2502   \u2514\u2500\u2500 services/       # Service-related pages\n\u2502   \u251c\u2500\u2500 hooks/              # Custom React hooks\n\u2502   \u251c\u2500\u2500 lib/                # Utility functions\n\u2502   \u251c\u2500\u2500 store/              # State management\n\u2502   \u2514\u2500\u2500 types/              # TypeScript type definitions\n\u251c\u2500\u2500 docs/                   # Documentation\n\u251c\u2500\u2500 tests/                  # Test files\n\u251c\u2500\u2500 public/                 # Static assets\n\u2514\u2500\u2500 scripts/                # Build and utility scripts\n</code></pre>\n<h3 id=\"development-workflow\">Development Workflow</h3>\n<ol>\n<li><strong>Create a feature branch</strong>:</li>\n</ol>\n<p><code>bash\n   git checkout -b feature/your-feature-name</code></p>\n<ol>\n<li><strong>Make your changes</strong>:</li>\n<li>Write code following our coding standards</li>\n<li>Add tests for new functionality</li>\n<li>\n<p>Update documentation as needed</p>\n</li>\n<li>\n<p><strong>Test your changes</strong>:</p>\n</li>\n</ol>\n<p><code>bash\n   npm run test\n   npm run lint\n   npm run type-check</code></p>\n<ol>\n<li><strong>Commit your changes</strong>:</li>\n</ol>\n<p><code>bash\n   git add .\n   git commit -m \"feat: add new feature\"</code></p>\n<ol>\n<li><strong>Push to your fork</strong>:</li>\n</ol>\n<p><code>bash\n   git push origin feature/your-feature-name</code></p>\n<ol>\n<li><strong>Create a Pull Request</strong> on GitHub</li>\n</ol>\n<hr />\n<h2 id=\"contribution-process\">\ud83d\udd04 Contribution Process</h2>\n<h3 id=\"types-of-contributions\">Types of Contributions</h3>\n<h4 id=\"bug-fixes\">\ud83d\udc1b Bug Fixes</h4>\n<ul>\n<li>Fix existing bugs and issues</li>\n<li>Improve error handling</li>\n<li>Enhance stability</li>\n</ul>\n<h4 id=\"new-features\">\u2728 New Features</h4>\n<ul>\n<li>Add new functionality</li>\n<li>Implement new components</li>\n<li>Add new API endpoints</li>\n</ul>\n<h4 id=\"documentation\">\ud83d\udcda Documentation</h4>\n<ul>\n<li>Improve existing documentation</li>\n<li>Add new guides and tutorials</li>\n<li>Fix documentation errors</li>\n</ul>\n<h4 id=\"testing\">\ud83e\uddea Testing</h4>\n<ul>\n<li>Add new tests</li>\n<li>Improve test coverage</li>\n<li>Fix failing tests</li>\n</ul>\n<h4 id=\"uiux-improvements\">\ud83c\udfa8 UI/UX Improvements</h4>\n<ul>\n<li>Improve user interface</li>\n<li>Enhance user experience</li>\n<li>Fix accessibility issues</li>\n</ul>\n<h4 id=\"performance\">\u26a1 Performance</h4>\n<ul>\n<li>Optimize performance</li>\n<li>Reduce bundle size</li>\n<li>Improve loading times</li>\n</ul>\n<h3 id=\"contribution-guidelines\">Contribution Guidelines</h3>\n<h4 id=\"before-you-start\">Before You Start</h4>\n<ol>\n<li><strong>Check existing issues</strong> to see if your contribution is already being worked on</li>\n<li><strong>Create an issue</strong> if you're planning a significant change</li>\n<li><strong>Discuss your approach</strong> with the maintainers for large changes</li>\n</ol>\n<h4 id=\"during-development\">During Development</h4>\n<ol>\n<li><strong>Follow coding standards</strong> outlined in this guide</li>\n<li><strong>Write tests</strong> for new functionality</li>\n<li><strong>Update documentation</strong> as needed</li>\n<li><strong>Keep commits focused</strong> and atomic</li>\n</ol>\n<h4 id=\"after-development\">After Development</h4>\n<ol>\n<li><strong>Test thoroughly</strong> before submitting</li>\n<li><strong>Update CHANGELOG.md</strong> if applicable</li>\n<li><strong>Create a clear PR description</strong></li>\n<li><strong>Respond to feedback</strong> promptly</li>\n</ol>\n<hr />\n<h2 id=\"coding-standards\">\ud83d\udcdd Coding Standards</h2>\n<h3 id=\"typescript-guidelines\">TypeScript Guidelines</h3>\n<h4 id=\"type-definitions\">Type Definitions</h4>\n<pre><code class=\"language-typescript\">// Use interfaces for object shapes\ninterface User {\n  id: string;\n  email: string;\n  role: UserRole;\n  createdAt: Date;\n}\n\n// Use enums for constants\nenum UserRole {\n  CLIENT = 'client',\n  PROVIDER = 'provider',\n  ADMIN = 'admin',\n  SUPER_ADMIN = 'super_admin',\n}\n\n// Use type aliases for unions\ntype Status = 'pending' | 'approved' | 'rejected';\n</code></pre>\n<h4 id=\"function-definitions\">Function Definitions</h4>\n<pre><code class=\"language-typescript\">// Use explicit return types for public functions\nexport function getUserById(id: string): Promise&lt;User | null&gt; {\n  // Implementation\n}\n\n// Use arrow functions for simple operations\nconst formatDate = (date: Date): string =&gt; {\n  return date.toISOString().split('T')[0];\n};\n</code></pre>\n<h4 id=\"error-handling\">Error Handling</h4>\n<pre><code class=\"language-typescript\">// Use custom error classes\nclass ValidationError extends Error {\n  constructor(\n    message: string,\n    public field: string\n  ) {\n    super(message);\n    this.name = 'ValidationError';\n  }\n}\n\n// Handle errors gracefully\ntry {\n  const result = await riskyOperation();\n  return result;\n} catch (error) {\n  if (error instanceof ValidationError) {\n    throw error;\n  }\n  throw new Error('An unexpected error occurred');\n}\n</code></pre>\n<h3 id=\"react-guidelines\">React Guidelines</h3>\n<h4 id=\"component-structure\">Component Structure</h4>\n<pre><code class=\"language-typescript\">// Use functional components with hooks\ninterface ButtonProps {\n  children: React.ReactNode;\n  onClick: () =&gt; void;\n  variant?: 'primary' | 'secondary';\n  disabled?: boolean;\n}\n\nexport function Button({\n  children,\n  onClick,\n  variant = 'primary',\n  disabled = false\n}: ButtonProps) {\n  return (\n    &lt;button\n      className={`btn btn-${variant}`}\n      onClick={onClick}\n      disabled={disabled}\n    &gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n</code></pre>\n<h4 id=\"hooks-usage\">Hooks Usage</h4>\n<pre><code class=\"language-typescript\">// Use custom hooks for complex logic\nfunction useUser(userId: string) {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState&lt;Error | null&gt;(null);\n\n  useEffect(() =&gt; {\n    fetchUser(userId)\n      .then(setUser)\n      .catch(setError)\n      .finally(() =&gt; setLoading(false));\n  }, [userId]);\n\n  return { user, loading, error };\n}\n</code></pre>\n<h4 id=\"state-management\">State Management</h4>\n<pre><code class=\"language-typescript\">// Use Zustand for global state\ninterface AppState {\n  user: User | null;\n  setUser: (user: User | null) =&gt; void;\n  logout: () =&gt; void;\n}\n\nexport const useAppStore = create&lt;AppState&gt;(set =&gt; ({\n  user: null,\n  setUser: user =&gt; set({ user }),\n  logout: () =&gt; set({ user: null }),\n}));\n</code></pre>\n<h3 id=\"api-guidelines\">API Guidelines</h3>\n<h4 id=\"route-handlers\">Route Handlers</h4>\n<pre><code class=\"language-typescript\">// Use proper HTTP methods and status codes\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method !== 'GET') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  try {\n    const data = await getData();\n    return res.status(200).json({ data });\n  } catch (error) {\n    return res.status(500).json({ error: 'Internal server error' });\n  }\n}\n</code></pre>\n<h4 id=\"input-validation\">Input Validation</h4>\n<pre><code class=\"language-typescript\">// Use Zod for input validation\nconst createUserSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  role: z.enum(['client', 'provider', 'admin']),\n});\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  try {\n    const validatedData = createUserSchema.parse(req.body);\n    // Process validated data\n  } catch (error) {\n    return res.status(400).json({ error: 'Validation failed' });\n  }\n}\n</code></pre>\n<h3 id=\"database-guidelines\">Database Guidelines</h3>\n<h4 id=\"query-patterns\">Query Patterns</h4>\n<pre><code class=\"language-typescript\">// Use Supabase client for database operations\nexport async function getServices(filters: ServiceFilters) {\n  let query = supabase.from('services').select('*').eq('status', 'active');\n\n  if (filters.category) {\n    query = query.eq('category', filters.category);\n  }\n\n  if (filters.minPrice) {\n    query = query.gte('base_price', filters.minPrice);\n  }\n\n  return await query;\n}\n</code></pre>\n<h4 id=\"rls-policies\">RLS Policies</h4>\n<pre><code class=\"language-sql\">-- Always use RLS policies for data access\nCREATE POLICY &quot;Users can view own profile&quot; ON profiles\n  FOR SELECT USING (auth.uid() = id);\n</code></pre>\n<hr />\n<h2 id=\"testing-guidelines\">\ud83e\uddea Testing Guidelines</h2>\n<h3 id=\"test-structure\">Test Structure</h3>\n<h4 id=\"unit-tests\">Unit Tests</h4>\n<pre><code class=\"language-typescript\">// Test individual functions\ndescribe('formatDate', () =&gt; {\n  it('should format date correctly', () =&gt; {\n    const date = new Date('2025-01-13T10:30:00Z');\n    const result = formatDate(date);\n    expect(result).toBe('2025-01-13');\n  });\n});\n</code></pre>\n<h4 id=\"component-tests\">Component Tests</h4>\n<pre><code class=\"language-typescript\">// Test React components\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { Button } from './Button';\n\ndescribe('Button', () =&gt; {\n  it('should render with correct text', () =&gt; {\n    render(&lt;Button onClick={() =&gt; {}}&gt;Click me&lt;/Button&gt;);\n    expect(screen.getByText('Click me')).toBeInTheDocument();\n  });\n\n  it('should call onClick when clicked', () =&gt; {\n    const handleClick = jest.fn();\n    render(&lt;Button onClick={handleClick}&gt;Click me&lt;/Button&gt;);\n    fireEvent.click(screen.getByText('Click me'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n});\n</code></pre>\n<h4 id=\"api-tests\">API Tests</h4>\n<pre><code class=\"language-typescript\">// Test API endpoints\nimport { createMocks } from 'node-mocks-http';\nimport handler from '../pages/api/users';\n\ndescribe('/api/users', () =&gt; {\n  it('should return users list', async () =&gt; {\n    const { req, res } = createMocks({\n      method: 'GET',\n    });\n\n    await handler(req, res);\n\n    expect(res._getStatusCode()).toBe(200);\n    expect(JSON.parse(res._getData())).toHaveProperty('data');\n  });\n});\n</code></pre>\n<h3 id=\"test-coverage\">Test Coverage</h3>\n<h4 id=\"coverage-requirements\">Coverage Requirements</h4>\n<ul>\n<li><strong>Unit Tests</strong>: 80% minimum coverage</li>\n<li><strong>Integration Tests</strong>: 70% minimum coverage</li>\n<li><strong>E2E Tests</strong>: Critical user flows covered</li>\n</ul>\n<h4 id=\"running-tests\">Running Tests</h4>\n<pre><code class=\"language-bash\"># Run all tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run tests with coverage\nnpm run test:coverage\n\n# Run specific test file\nnpm test Button.test.tsx\n</code></pre>\n<hr />\n<h2 id=\"documentation-guidelines\">\ud83d\udcda Documentation Guidelines</h2>\n<h3 id=\"code-documentation\">Code Documentation</h3>\n<h4 id=\"jsdoc-comments\">JSDoc Comments</h4>\n<pre><code class=\"language-typescript\">/**\n * Creates a new user account\n * @param userData - User information\n * @param userData.email - User's email address\n * @param userData.password - User's password\n * @param userData.role - User's role\n * @returns Promise resolving to created user\n * @throws {ValidationError} When user data is invalid\n * @throws {ConflictError} When user already exists\n */\nexport async function createUser(userData: CreateUserData): Promise&lt;User&gt; {\n  // Implementation\n}\n</code></pre>\n<h4 id=\"readme-files\">README Files</h4>\n<pre><code class=\"language-markdown\"># Component Name\n\nBrief description of what this component does.\n\n## Usage\n\n```typescript\nimport { ComponentName } from './ComponentName';\n\n&lt;ComponentName prop1=&quot;value&quot; prop2={123} /&gt;\n```\n</code></pre>\n<h2 id=\"props\">Props</h2>\n<table>\n<thead>\n<tr>\n<th>Prop</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>prop1</td>\n<td>string</td>\n<td>-</td>\n<td>Description of prop1</td>\n</tr>\n<tr>\n<td>prop2</td>\n<td>number</td>\n<td>0</td>\n<td>Description of prop2</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"basic-usage\">Basic Usage</h3>\n<p>[Example code]</p>\n<h3 id=\"advanced-usage\">Advanced Usage</h3>\n<p>[Example code]</p>\n<pre><code>\n### API Documentation\n\n#### Endpoint Documentation\n```typescript\n/**\n * @api {get} /api/services Get Services\n * @apiName GetServices\n * @apiGroup Services\n * @apiVersion 1.0.0\n *\n * @apiQuery {string} [category] Service category filter\n * @apiQuery {number} [minPrice] Minimum price filter\n * @apiQuery {number} [maxPrice] Maximum price filter\n *\n * @apiSuccess {Object[]} data Array of services\n * @apiSuccess {string} data.id Service ID\n * @apiSuccess {string} data.title Service title\n * @apiSuccess {number} data.price Service price\n *\n * @apiError {Object} 400 Bad Request\n * @apiError {string} 400.error Error message\n */\n</code></pre>\n<hr />\n<h2 id=\"issue-reporting\">\ud83d\udc1b Issue Reporting</h2>\n<h3 id=\"bug-reports\">Bug Reports</h3>\n<p>When reporting bugs, please include:</p>\n<ol>\n<li><strong>Clear title</strong> describing the issue</li>\n<li><strong>Steps to reproduce</strong> the bug</li>\n<li><strong>Expected behavior</strong> vs actual behavior</li>\n<li><strong>Environment details</strong> (OS, browser, Node.js version)</li>\n<li><strong>Screenshots</strong> or error messages if applicable</li>\n<li><strong>Code snippets</strong> if relevant</li>\n</ol>\n<h4 id=\"bug-report-template\">Bug Report Template</h4>\n<pre><code class=\"language-markdown\">## Bug Description\n\nBrief description of the bug\n\n## Steps to Reproduce\n\n1. Go to '...'\n2. Click on '...'\n3. Scroll down to '...'\n4. See error\n\n## Expected Behavior\n\nWhat you expected to happen\n\n## Actual Behavior\n\nWhat actually happened\n\n## Environment\n\n- OS: [e.g. Windows 10, macOS 12.0]\n- Browser: [e.g. Chrome 96, Firefox 95]\n- Node.js: [e.g. 18.0.0]\n\n## Additional Context\n\nAny other context about the problem\n</code></pre>\n<h3 id=\"feature-requests\">Feature Requests</h3>\n<p>When requesting features, please include:</p>\n<ol>\n<li><strong>Clear title</strong> describing the feature</li>\n<li><strong>Problem description</strong> - what problem does this solve?</li>\n<li><strong>Proposed solution</strong> - how should it work?</li>\n<li><strong>Alternatives considered</strong> - other solutions you've thought about</li>\n<li><strong>Additional context</strong> - any other relevant information</li>\n</ol>\n<hr />\n<h2 id=\"pull-request-process\">\ud83d\udd00 Pull Request Process</h2>\n<h3 id=\"pr-guidelines\">PR Guidelines</h3>\n<h4 id=\"before-submitting\">Before Submitting</h4>\n<ol>\n<li><strong>Ensure tests pass</strong>: <code>npm test</code></li>\n<li><strong>Run linting</strong>: <code>npm run lint</code></li>\n<li><strong>Check types</strong>: <code>npm run type-check</code></li>\n<li><strong>Update documentation</strong> if needed</li>\n<li><strong>Update CHANGELOG.md</strong> if applicable</li>\n</ol>\n<h4 id=\"pr-description-template\">PR Description Template</h4>\n<pre><code class=\"language-markdown\">## Description\n\nBrief description of changes\n\n## Type of Change\n\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n\n- [ ] Unit tests added/updated\n- [ ] Integration tests added/updated\n- [ ] Manual testing completed\n\n## Checklist\n\n- [ ] Code follows project style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] CHANGELOG.md updated\n- [ ] No breaking changes (or breaking changes documented)\n</code></pre>\n<h4 id=\"review-process\">Review Process</h4>\n<ol>\n<li><strong>Automated checks</strong> must pass</li>\n<li><strong>Code review</strong> by maintainers</li>\n<li><strong>Testing</strong> by QA team (if applicable)</li>\n<li><strong>Approval</strong> from at least one maintainer</li>\n<li><strong>Merge</strong> after approval</li>\n</ol>\n<h3 id=\"commit-message-format\">Commit Message Format</h3>\n<p>Use conventional commits format:</p>\n<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre>\n<h4 id=\"types\">Types</h4>\n<ul>\n<li><code>feat</code>: New feature</li>\n<li><code>fix</code>: Bug fix</li>\n<li><code>docs</code>: Documentation changes</li>\n<li><code>style</code>: Code style changes</li>\n<li><code>refactor</code>: Code refactoring</li>\n<li><code>test</code>: Test changes</li>\n<li><code>chore</code>: Build process or auxiliary tool changes</li>\n</ul>\n<h4 id=\"examples_1\">Examples</h4>\n<pre><code>feat(auth): add two-factor authentication\nfix(api): resolve user creation validation error\ndocs(readme): update installation instructions\ntest(components): add Button component tests\n</code></pre>\n<hr />\n<h2 id=\"release-process\">\ud83d\ude80 Release Process</h2>\n<h3 id=\"version-numbering\">Version Numbering</h3>\n<p>We use <a href=\"https://semver.org/\">Semantic Versioning</a>:</p>\n<ul>\n<li><strong>MAJOR</strong>: Breaking changes</li>\n<li><strong>MINOR</strong>: New features (backward compatible)</li>\n<li><strong>PATCH</strong>: Bug fixes (backward compatible)</li>\n</ul>\n<h3 id=\"release-steps\">Release Steps</h3>\n<ol>\n<li><strong>Update version</strong> in <code>package.json</code></li>\n<li><strong>Update CHANGELOG.md</strong> with new features/fixes</li>\n<li><strong>Create release branch</strong> from <code>main</code></li>\n<li><strong>Run full test suite</strong></li>\n<li><strong>Create release PR</strong> for review</li>\n<li><strong>Merge release PR</strong> after approval</li>\n<li><strong>Create GitHub release</strong> with release notes</li>\n<li><strong>Deploy to production</strong></li>\n</ol>\n<h3 id=\"release-checklist\">Release Checklist</h3>\n<ul>\n<li>[ ] All tests passing</li>\n<li>[ ] Documentation updated</li>\n<li>[ ] CHANGELOG.md updated</li>\n<li>[ ] Version bumped</li>\n<li>[ ] Release notes prepared</li>\n<li>[ ] Production deployment tested</li>\n</ul>\n<hr />\n<h2 id=\"getting-help\">\ud83c\udd98 Getting Help</h2>\n<h3 id=\"resources\">Resources</h3>\n<ul>\n<li><strong>Documentation</strong>: <a href=\"https://docs.businessserviceshub.com\">docs.businessserviceshub.com</a></li>\n<li><strong>Discord</strong>: <a href=\"https://discord.gg/business-services-hub\">discord.gg/business-services-hub</a></li>\n<li><strong>GitHub Discussions</strong>: <a href=\"https://github.com/business-services-hub/business-services-hub/discussions\">GitHub Discussions</a></li>\n<li><strong>Email</strong>: contributors@businessserviceshub.com</li>\n</ul>\n<h3 id=\"common-issues\">Common Issues</h3>\n<h4 id=\"development-setup-issues\">Development Setup Issues</h4>\n<pre><code class=\"language-bash\"># Clear node_modules and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n\n# Reset Supabase local development\nsupabase stop\nsupabase start\n</code></pre>\n<h4 id=\"build-issues\">Build Issues</h4>\n<pre><code class=\"language-bash\"># Clear Next.js cache\nrm -rf .next\nnpm run build\n\n# Check TypeScript errors\nnpm run type-check\n</code></pre>\n<h4 id=\"test-issues\">Test Issues</h4>\n<pre><code class=\"language-bash\"># Clear test cache\nnpm test -- --clearCache\n\n# Run tests in verbose mode\nnpm test -- --verbose\n</code></pre>\n<hr />\n<h2 id=\"contribution-recognition\">\ud83c\udfaf Contribution Recognition</h2>\n<h3 id=\"contributors\">Contributors</h3>\n<p>We recognize all contributors in our:</p>\n<ul>\n<li><strong>README.md</strong> contributors section</li>\n<li><strong>GitHub contributors</strong> page</li>\n<li><strong>Release notes</strong> for significant contributions</li>\n<li><strong>Annual contributor</strong> appreciation</li>\n</ul>\n<h3 id=\"types-of-recognition\">Types of Recognition</h3>\n<ul>\n<li><strong>Code Contributors</strong>: Code, tests, documentation</li>\n<li><strong>Bug Reporters</strong>: Quality bug reports</li>\n<li><strong>Feature Requesters</strong>: Valuable feature suggestions</li>\n<li><strong>Community Helpers</strong>: Helping other contributors</li>\n<li><strong>Documentation Writers</strong>: Improving documentation</li>\n</ul>\n<hr />\n<h2 id=\"contact\">\ud83d\udcde Contact</h2>\n<h3 id=\"maintainers\">Maintainers</h3>\n<ul>\n<li><strong>Project Lead</strong>: <a href=\"https://github.com/project-lead\">@project-lead</a></li>\n<li><strong>Technical Lead</strong>: <a href=\"https://github.com/tech-lead\">@tech-lead</a></li>\n<li><strong>Community Manager</strong>: <a href=\"https://github.com/community-manager\">@community-manager</a></li>\n</ul>\n<h3 id=\"communication-channels\">Communication Channels</h3>\n<ul>\n<li><strong>GitHub Issues</strong>: For bug reports and feature requests</li>\n<li><strong>GitHub Discussions</strong>: For general questions and discussions</li>\n<li><strong>Discord</strong>: For real-time chat and quick questions</li>\n<li><strong>Email</strong>: For private or sensitive matters</li>\n</ul>\n<hr />\n<p><em>Thank you for contributing to the Business Services Hub! Your contributions help make our platform better for everyone.</em></p>\n<p><em>Last updated: January 2025</em>\n<em>Contributing Guide version: 1.0.0</em></p>"
}